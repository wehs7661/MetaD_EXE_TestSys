import os
import numpy as np
import scipy.interpolate
import natsort
import argparse
import matplotlib.pyplot as plt
from matplotlib import rc

def initialize():
    parser = argparse.ArgumentParser(
        description='This code calculate the free energy surface along with its uncertainty by reading in histogram data generated by PLUMED.')
    parser.add_argument('-d',
                        '--dir',
                        type=str,
                        default='histogram',
                        help='The directory of the folder containing the histogram data files. (Default: "histogram")')
    parser.add_argument('-hh',
                        '--hist',
                        type=str,
                        default='hist.dat',
                        help='The common suffix of the histogram data files. (Default: hist.dat)')
    parser.add_argument('-n',
                        '--n_CVs',
                        type=int,
                        default=1,
                        help='The number of CVs. (Default: 1)')
    parser.add_argument('-o',
                        '--output',
                        type=str,
                        default='fes_blocks.dat',
                        help='The filename of the output fes file.')

    args_parse = parser.parse_args()

    return args_parse

def read_histogram(hist_file, n_CVs):
    """
    This function reads in weighted histogram data given the file name of the file. 

    Parameters
    ----------
    hist_file (str): The file name of the histogram data file. 
    n_CV      (int): The number of CV

    Returns
    -------
    norm      (float): Normalization constant, which is the sum of the weights. 
    hist      (np.array): The histogram data.
    """
    data = np.loadtxt(hist_file)
    with open(hist_file, "r") as f:
        for line in f:
            if line.startswith('#! SET normalisation'):
                norm = float(line.split()[-1])
    hist = data[:, n_CVs]

    return norm, hist

def calculate_free_energy(hist_dir, hist_files, n_CVs):
    """
    
    Parameters
    ----------
    hist_dir   (str):  The directory of the folder containning multiple histogram data files.
    hist_files (list): A list of filenames of the hidtogram data files.
    n_CVs      (int):  The number of CVs.

    Return
    ------
    fes        (np.array): free energy as a function of CV
    f_err      (np.array): free energy error as a function of CV
    """
    # Step 1: Calculate the average of the weighted histogram for each gridded CV value
    w_sum, avg = 0, 0
    for f in hist_files:
        norm, hist = read_histogram(f'{hist_dir}/{f}', n_CVs)
        w_sum += norm
        avg += norm * hist
    avg = avg / w_sum
    print(avg)
    # Step 2: Calculate the uncertainty for each gridded CV value
    error = 0
    for f in hist_files:
        norm, hist = read_histogram(f'{hist_dir}/{f}', n_CVs)
        error += norm * norm * (hist - avg) ** 2
    error = np.sqrt(error / (w_sum ** 2))

    # Step 3: Convert to free energy 
    fes = -np.log(avg)   # units: kT
    f_err = error / avg  # units kT

    return fes, f_err


if __name__ == '__main__':
    args = initialize()

    # 1. Sort the input histogram files, read and analyze the data
    files =[]
    for f in os.listdir(f'{args.dir}'):
        if f.endswith(f'{args.hist}'):
            files.append(f)
    files = natsort.natsorted(files, reverse=False)   

    fes, f_err = calculate_free_energy(args.dir, files, args.n_CVs)    

    # 2. Get the gridded CV values from hist.dat and write fes.dat
    CV_points = []
    for i in range(args.n_CVs):
        CV_points.append(np.transpose(np.loadtxt(f'{args.dir}/{files[-1]}'))[i])
    
    print(CV_points)
    output = open(f'{args.output}', 'w')
    for i in range(len(CV_points[0])):
        CV_str = ''
        for j in range(args.n_CVs):
            CV_str += f'{CV_points[j][i]: .3f}   '
            output.write(f'{CV_str}   {fes[i]: .6f}   {f_err[i]: .6f}\n')
    output.close()


